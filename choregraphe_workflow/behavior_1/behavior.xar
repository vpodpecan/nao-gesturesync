<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="100">
                        <Box name="Stand Up" id="1" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="220" y="195">
                            <bitmap>media/images/box/movement/stand.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="StandUpBehavior">
                                    <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                            <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                    <Choice value="Crouch" />
                                                    <Choice value="LyingBack" />
                                                    <Choice value="LyingBelly" />
                                                    <Choice value="Sit" />
                                                    <Choice value="SitRelax" />
                                                    <Choice value="StandInit" />
                                                    <Choice value="Stand" />
                                                    <Choice value="StandZero" />
                                                </Parameter>
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                                <Resource name="Stiffness" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="All motors" type="Lock" timeout="0" />
                        </Box>
                        <Box name="animate" id="6" localization="8" tooltip="" x="423" y="193">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True)
        self.bmanager = ALProxy("ALBehaviorManager")
        self.framemanager = ALProxy("ALFrameManager")

    def onLoad(self):
        self.audioID = None
        self.audioFilename = None
        self.markersFilename = None
        self.markers = None
        self.startpos = 0
        self.mustStop = False

    def onUnload(self):
        self.mustStop = True
        if self.audioID is not None:
            try:
                self.playerStop.stop(self.audioID)
            except Exception as e:
                self.logger.warning('Cannot stop: ' + str(e))
#        self.audioID = None
#        self.audioFilename = None
#        self.markersFilename = None
#        self.markers = None
#        self.done = None
#        self.startpos = 0


    def loadMarkers(self):
        markers = []
        done = []
        with open(self.markersFilename) as fp:
            for line in fp:
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                data = line.split()
                markers.append((float(data[0]), str(data[1])))
                done.append(False)
        self.markers = markers
        self.done = done

    def onInput_onStart(self):
        from time import time, sleep

        self.startpos = int(self.getParameter("starting position"))
        self.audioFilename = self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("audio file")
        self.markersFilename = self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("markers file")
        self.loadMarkers()

        if self.audioFilename is None or self.markersFilename is None:
            self.logger.error('run gesture: not all input files are present!')
            return

        times = []
        for x in self.markers:
            times.append(x[0])

        # if the closest marker is farther away do not start its gesture
        maxDiff = float(self.getParameter("max distance to closest"))
        stopPrev = bool(self.getParameter("stop previous behaviour"))

        if self.startpos != 0:
            self.audioID = self.player.post.playFileFromPosition(self.audioFilename, self.startpos)
        else:
            self.audioID = self.player.post.playFile(self.audioFilename)

        start = time()
        currGesture = ''
        while True:
            tdif = time() - start + self.startpos
            diffs = []
            for t in times:
                diffs.append(abs(t-tdif))
            iClosest = diffs.index(min(diffs))
            diff = diffs[iClosest]
#            self.logger.warning('diff ' + str(diff))
            if diff < maxDiff:
                pos, gesture = self.markers[iClosest]
                # if gesture != currGesture:
                if not self.done[iClosest]:
#                    self.logger.warning('gesture  ' + str(gesture))
                    if stopPrev:
                        if currGesture != '':
                            self.bmanager.stopBehavior(currGesture)
                    if not self.bmanager.isBehaviorRunning(currGesture):
                        currGesture = gesture
                        self.done[iClosest] = True
                        self.bmanager.preloadBehavior(currGesture)
                        self.bmanager.startBehavior(currGesture)
                    else:
                        self.logger.warning('...still running...')
            if iClosest == len(times)-1 or self.mustStop:
                break
            else:
                diffClosest = times[iClosest]-tdif
                # not there yet
                if diffClosest > 0:
                    delay = diffClosest - 0.001
                # already past, looking at next
                else:
                    delay = times[iClosest+1] - tdif - 0.001
#                self.logger.warning('sleep  ' + str(delay))
                sleep(delay)
        # end

        # wait for gesture and audio to finish
        while self.bmanager.isBehaviorRunning(currGesture):
            sleep(0.5)
        if self.player.isRunning(self.audioID):
            self.player.wait(self.audioID, 0)
        self.onStopped()
    # end

    def onInput_onStop(self):
        self.onUnload() # it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() # activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Parameter name="max distance to closest" inherits_from_parent="0" content_type="2" value="1" default_value="1.01" min="0" max="10" tooltip="the closest gesture won&apos;t start it its start time is farther than this away" id="5" />
                            <Parameter name="stop previous behaviour" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="if set, the current behaviour will be forcibly stopped and the next one will be started&#x0A;WARNING: may lead to instability! Do not complain later, you have been warned :D" id="6" />
                            <Parameter name="starting position" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="999" tooltip="" id="7" />
                            <Parameter name="audio file" inherits_from_parent="0" content_type="4" value="/../proverb.wav" default_value="" tooltip="" id="8" />
                            <Parameter name="markers file" inherits_from_parent="0" content_type="4" value="/../gestures.txt" default_value="" tooltip="" id="9" />
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
